#=================================================
# Description: Build ubports using GitHub Actions
# Lisence: MIT
# Author: 0312birdzhang
# Credit: https://github.com/P3TERX/Actions-OpenWrt
#=================================================

name: Build System Image for Ubports

on:
  workflow_dispatch:
  push:
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:

  build:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@master
    
    - name: Initialization environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
        openjdk-8-jdk android-tools-adb bc bison \
        build-essential curl flex g++-multilib gcc-multilib gnupg gperf \
        imagemagick lib32ncurses-dev \
        lib32readline-dev lib32z1-dev  liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev \
        libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc yasm zip zlib1g-dev \
        qemu-user-static qemu-system-arm e2fsprogs simg2img \
        libtinfo5 libncurses5 gzip virtualenv
        sudo docker rmi `docker images -q`
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        mkdir -p ~/bin
        wget 'https://storage.googleapis.com/git-repo-downloads/repo' -P ~/bin
        chmod +x ~/bin/repo
        git config --global user.name "pbteja100"
        git config --global user.email "pbteja100@gmail.com"
        source halium.env
        export FLASHABLE_DIR=ubports-`date +%Y%m%d-%H%M%S`-devel-$DEVICE
        echo $FLASHABLE_DIR > ~/.current_version
        echo "VENDOR=$(echo $VENDOR)" >> $GITHUB_ENV
        echo "DEVICE=$(echo $DEVICE)" >> $GITHUB_ENV
        echo "ANDROID_ROOT=$(echo $ANDROID_ROOT)" >> $GITHUB_ENV
        echo "FLASHABLE_DIR=$(echo $FLASHABLE_DIR)" >> $GITHUB_ENV

    - name: Downloading source code
      run: |
        source halium.env
        mkdir -p $ANDROID_ROOT
        cd $ANDROID_ROOT
        repo init -u https://github.com/Halium/android -b halium-7.1 --depth=1
        repo sync -j8 -c --no-clone-bundle --no-tags
        cd $ANDROID_ROOT/halium/droidmedia
        git fetch https://github.com/peat-psuwit/droidmedia fix-raw-data
    
    - name: Clone device spec source
      run: |
        source halium.env
        git clone https://github.com/ut-on-garlic/android_device_yu_garlic.git -b halium-7.1-ubports $ANDROID_ROOT/device/yu/garlic --depth=1
        git clone https://github.com/ut-on-garlic/proprietary_vendor_yu.git $ANDROID_ROOT/vendor/yu --depth=1
        git clone https://github.com/ut-on-garlic/android_kernel_yu_msm8937.git $ANDROID_ROOT/kernel/yu/msm8937 --depth=1
        git clone https://android.googlesource.com/platform/external/curl.git -b android-7.1.2_r37 $ANDROID_ROOT/external/libcurl --depth=1

    - name: Build HAL
      run: |
        chmod +x build-hal.sh
        bash -x build-hal.sh
      shell: bash

    - name: Build Package
      run: |
        chmod +x package.sh
        bash -x package.sh
      shell: bash

    - name: Make zips
      run: |
        cd ${{env.ANDROID_ROOT}}/out/target/product/${{env.DEVICE}} 
        zip -r system-image.zip system.img

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.MySecret }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.MySecret }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: /home/runner/work/${{env.FLASHABLE_DIR}}.zip
        asset_name: ${{env.FLASHABLE_DIR}}.zip
        asset_content_type: application/zip

    - name: Upload Halium-boot
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.MySecret }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ${{env.ANDROID_ROOT}}/out/target/product/${{env.DEVICE}}/halium-boot.img
        asset_name: halium-boot.img
        asset_content_type: application/octet-stream

    - name: Upload Hybris-boot
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.MySecret }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ${{env.ANDROID_ROOT}}/out/target/product/${{env.DEVICE}}/hybris-boot.img
        asset_name: hybris-boot.img
        asset_content_type: application/octet-stream

    - name: Upload System-image
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.MySecret }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ${{env.ANDROID_ROOT}}/out/target/product/${{env.DEVICE}}/system-image.zip
        asset_name: system-image.zip
        asset_content_type: application/zip
